services:
  mysql:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME:-nodo}
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DATABASE_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - nodo-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file: .env
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
      python wait_for_db.py &&
      python manage.py makemigrations --no-input &&
      python manage.py migrate --no-input &&
      python manage.py collectstatic --no-input --clear &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --worker-class sync --max-requests 1000 --preload --timeout 120 --access-logfile - --error-logfile -
      "
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - nodo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    env_file: .env
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - nodo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - nodo-network

volumes:
  db_data:
  static_volume:
  media_volume:

networks:
  nodo-network:
    driver: bridge