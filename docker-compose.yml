services:
  mysql:
    image: mysql:8
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DATABASE_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 15s

  backend:
    build: ./backend
    env_file: .env
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
      python wait_for_db.py &&
      python manage.py migrate --no-input &&
      python manage.py collectstatic --no-input --clear --no-post-process || true &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000
      "
    ports:
      - "8000:8000"

  adminer:
    image: adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    ports:
      - "8080:8080"
    depends_on:
      - mysql

  frontend:
    build: ./frontend
    env_file: .env
    command: npm run dev -- -p 3000 -H 0.0.0.0
    ports:
      - "3008:3000"
    # ðŸ”¸ Monta el cÃ³digo del host + evita pisar node_modules
    volumes:
      - ./frontend:/app
      - /app/node_modules
    # ðŸ”¸ ForzÃ¡ polling para que el watcher detecte cambios en Windows/WSL/Docker Desktop
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=300

volumes:
  db_data:
